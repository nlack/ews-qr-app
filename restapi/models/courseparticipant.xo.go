// Package models contains the types for schema 'ewsdb'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Courseparticipant represents a row from 'ewsdb.courseparticipant'.
type Courseparticipant struct {
	Courseid      int `json:"courseid"`      // courseid
	Participantid int `json:"participantid"` // participantid

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Courseparticipant exists in the database.
func (c *Courseparticipant) Exists() bool {
	return c._exists
}

// Deleted provides information if the Courseparticipant has been deleted from the database.
func (c *Courseparticipant) Deleted() bool {
	return c._deleted
}

// Insert inserts the Courseparticipant to the database.
func (c *Courseparticipant) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO ewsdb.courseparticipant (` +
		`courseid, participantid` +
		`) VALUES (` +
		`?, ?` +
		`)`

	// run query
	XOLog(sqlstr, c.Courseid, c.Participantid)
	_, err = db.Exec(sqlstr, c.Courseid, c.Participantid)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Courseparticipant in the database.
func (c *Courseparticipant) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE ewsdb.courseparticipant SET ` +
		`courseid = ?` +
		` WHERE participantid = ?`

	// run query
	XOLog(sqlstr, c.Courseid, c.Participantid)
	_, err = db.Exec(sqlstr, c.Courseid, c.Participantid)
	return err
}

// Save saves the Courseparticipant to the database.
func (c *Courseparticipant) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Delete deletes the Courseparticipant from the database.
func (c *Courseparticipant) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM ewsdb.courseparticipant WHERE participantid = ?`

	// run query
	XOLog(sqlstr, c.Participantid)
	_, err = db.Exec(sqlstr, c.Participantid)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// Course returns the Course associated with the Courseparticipant's Courseid (courseid).
//
// Generated from foreign key 'courseid'.
func (c *Courseparticipant) Course(db XODB) (*Course, error) {
	return CourseByID(db, c.Courseid)
}

// Participant returns the Participant associated with the Courseparticipant's Participantid (participantid).
//
// Generated from foreign key 'participantid'.
func (c *Courseparticipant) Participant(db XODB) (*Participant, error) {
	return ParticipantByID(db, c.Participantid)
}

// CourseparticipantsByCourseid retrieves a row from 'ewsdb.courseparticipant' as a Courseparticipant.
//
// Generated from index 'courseid'.
func CourseparticipantsByCourseid(db XODB, courseid int) ([]*Courseparticipant, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`courseid, participantid ` +
		`FROM ewsdb.courseparticipant ` +
		`WHERE courseid = ?`

	// run query
	XOLog(sqlstr, courseid)
	q, err := db.Query(sqlstr, courseid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Courseparticipant{}
	for q.Next() {
		c := Courseparticipant{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.Courseid, &c.Participantid)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CourseparticipantByParticipantid retrieves a row from 'ewsdb.courseparticipant' as a Courseparticipant.
//
// Generated from index 'courseparticipant_participantid_pkey'.
func CourseparticipantByParticipantid(db XODB, participantid int) (*Courseparticipant, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`courseid, participantid ` +
		`FROM ewsdb.courseparticipant ` +
		`WHERE participantid = ?`

	// run query
	XOLog(sqlstr, participantid)
	c := Courseparticipant{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, participantid).Scan(&c.Courseid, &c.Participantid)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CourseparticipantsByParticipantid retrieves a row from 'ewsdb.courseparticipant' as a Courseparticipant.
//
// Generated from index 'participantid'.
func CourseparticipantsByParticipantid(db XODB, participantid int) ([]*Courseparticipant, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`courseid, participantid ` +
		`FROM ewsdb.courseparticipant ` +
		`WHERE participantid = ?`

	// run query
	XOLog(sqlstr, participantid)
	q, err := db.Query(sqlstr, participantid)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Courseparticipant{}
	for q.Next() {
		c := Courseparticipant{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.Courseid, &c.Participantid)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
