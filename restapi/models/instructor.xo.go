// Package models contains the types for schema 'testtt'.
package models

// GENERATED BY XO. DO NOT EDIT.

import "errors"

// Instructor represents a row from 'testtt.instructor'.
type Instructor struct {
	ID        int    `json:"id"`        // id
	Name      string `json:"name"`      // name
	Password  string `json:"password"`  // password
	Firstname string `json:"firstname"` // firstname
	Lastname  string `json:"lastname"`  // lastname
	Apikey    string `json:"apikey"`    // apikey

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Instructor exists in the database.
func (i *Instructor) Exists() bool {
	return i._exists
}

// Deleted provides information if the Instructor has been deleted from the database.
func (i *Instructor) Deleted() bool {
	return i._deleted
}

// Insert inserts the Instructor to the database.
func (i *Instructor) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO testtt.instructor (` +
		`name, password, firstname, lastname, apikey` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, i.Name, i.Password, i.Firstname, i.Lastname, i.Apikey)
	res, err := db.Exec(sqlstr, i.Name, i.Password, i.Firstname, i.Lastname, i.Apikey)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	i.ID = int(id)
	i._exists = true

	return nil
}

// Update updates the Instructor in the database.
func (i *Instructor) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE testtt.instructor SET ` +
		`name = ?, password = ?, firstname = ?, lastname = ?, apikey = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, i.Name, i.Password, i.Firstname, i.Lastname, i.Apikey, i.ID)
	_, err = db.Exec(sqlstr, i.Name, i.Password, i.Firstname, i.Lastname, i.Apikey, i.ID)
	return err
}

// Save saves the Instructor to the database.
func (i *Instructor) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Delete deletes the Instructor from the database.
func (i *Instructor) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM testtt.instructor WHERE id = ?`

	// run query
	XOLog(sqlstr, i.ID)
	_, err = db.Exec(sqlstr, i.ID)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// InstructorByID retrieves a row from 'testtt.instructor' as a Instructor.
//
// Generated from index 'instructor_id_pkey'.
func InstructorByID(db XODB, id int) (*Instructor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, password, firstname, lastname, apikey ` +
		`FROM testtt.instructor ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	i := Instructor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&i.ID, &i.Name, &i.Password, &i.Firstname, &i.Lastname, &i.Apikey)
	if err != nil {
		return nil, err
	}

	return &i, nil
}

// InstructorByName retrieves a row from 'testtt.instructor' as a Instructor.
//
// Generated from index 'name'.
func InstructorByName(db XODB, name string) (*Instructor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, password, firstname, lastname, apikey ` +
		`FROM testtt.instructor ` +
		`WHERE name = ?`

	// run query
	XOLog(sqlstr, name)
	i := Instructor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name).Scan(&i.ID, &i.Name, &i.Password, &i.Firstname, &i.Lastname, &i.Apikey)
	if err != nil {
		return nil, err
	}

	return &i, nil
}

func InstructorByNameAndPW(db XODB, name string, password string) (*Instructor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, name, password, firstname, lastname, apikey ` +
		`FROM testtt.instructor ` +
		`WHERE name = ? AND password = ?`

	// run query
	XOLog(sqlstr, name, password)
	i := Instructor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, name, password).Scan(&i.ID, &i.Name, &i.Password, &i.Firstname, &i.Lastname, &i.Apikey)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
